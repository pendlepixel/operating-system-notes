《内存管理》

  经过多年的探索，人们提出了分层处理器体系的概念，在这个体系中，计算机有若干（MB）快速、昂贵且易失的高速缓存（cache），数千兆（GB）速度与价格适中且同样
具有易失性的内存，以及几兆兆（TB）低速、廉价、非易失性的磁盘存储，另外还有诸如DVD和USB等可移动存储装置。操作系统的工作是将这个存储体系抽象为一个有用的
模型并管理这个抽象模型。
  操作系统中管理分层存储器体系的部分称为存储管理器。它的任务是有效地管理内存，即记录哪些内存是正在使用的，哪些内存是空闲的；在进程需要时为其分配内存，在
进程使用完后释放内存。


3.1 无存储器抽象
  最简单的存储器抽象是无存储器抽象，每个小程序都直接访问物理内存。在这种情况下，正常，想要在内存中同时运行两个程序是不可能的。即使只运行一个程序，也存在
可能会影响到操作系统程序，引发灾难后果。

在不使用存储器抽象的情况下运行多个程序：
  操作系统把当前内存中所有内容保存到磁盘文件，然后把下一个程序读入到内存中再运行。但是这样效率会非常低。
  
  
3.2 一种存储器抽象：地址空间
要点1：不能将物理地址直接暴露给进程。
把物理地址直接暴露给进程会带来两个重要问题：
  1.如果用户进程可以寻址内存的每一个字节，它们就可以很容易地破坏操作系统，从而使系统慢慢停止运行（除非使用特殊的硬件进行保护，如IBM360的锁键模式）。
即使在只有一个用户进程运行的情况下，这个问题也是存在的。
  2.使用这种模型，想要同时运行（如果只有一个CPU就轮流执行）多个程序是很困难的。在个人计算机上，同时打开多个程序是很常见的，其中一个当前正在工作，其余
的在按下鼠标按钮的时候才会被激活。在系统中没有对物理内存的抽象的情况下，很难实现上述情景。

  要使多个应用程序同时处于内存中并且不互相影响，需要解决两个问题：保护和重定位。

  可以通过创造一个新的存储器抽象（地址空间）来解决这个问题。
  就像进程的概念创造了一类抽象的CPU以运行程序一样，地址空间为程序创造了一种抽象的内存。地址空间是一个进程可用于寻址内存的一套地址集合。每个进程都有自己的
地址空间，并且这个地址空间独立于其他进程地址空间（除了在一些特殊情况下进程需要共享它们的地址空间外）。

  地址空间通过为每个进程提供自己的地址空间，并且通过创造抽象的内存实现了保护的问题。
通过动态重定位，即简单地把每个进程的地址空间映射到物理内存的不同部分，可以解决重定位的问题。实现动态重定位的一个比较经典的办法给每个CPU配置两个特殊的硬
件寄存区，通常叫做基址寄存器和界限寄存器。

  使用基址寄存器和界限寄存器重定位的缺点是，每次访问内存都需要进行加法运算和比较运算。比较运算可以做得很快，但是加法运算由于进位传递时间的问题，在没有使用
特殊电路的情况下会显得很慢。

要点2：由于内存大小是有限的，因此不能保存所有的进程。
处理内存超载（内存中放不下需要运行的所有进程）的通用办法有两种：
  1.交换技术。即把一个进程完整调入内存，使该进程运行一段时间，然后把它存回磁盘，空闲进程主要存储在磁盘上，所有当它们不运行时就不会占用内存
  2.虚拟内存。
  
交换技术相关问题：
  1.交换在内存中会产生很多个空闲区。可以通过内存紧缩技术（把所有的进程尽可能地向下移动，有可能将这些小的空闲区合成一大块）。
  2.进程被创建或换入时，应该为它分配多大内存？因为大部分进程在运行时都要增长，为了减少因内存区域不够而引起的进程交换和移动所产生的开销，一种可用的方法
是当换入或移动进程时为它分配一些额外的内存。

